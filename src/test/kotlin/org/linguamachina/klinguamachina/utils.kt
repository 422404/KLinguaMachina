package org.linguamachina.klinguamachina

import org.junit.jupiter.api.Assertions.*
import org.linguamachina.klinguamachina.generation.bytecode.Bytecode
import org.linguamachina.klinguamachina.parsing.ast.antlr.AntlrASTBuilder
import org.linguamachina.klinguamachina.parsing.ast.nodes.impl.BlockLiteralNode
import org.linguamachina.klinguamachina.parsing.ast.nodes.impl.RootNode
import org.linguamachina.klinguamachina.parsing.ast.nodes.impl.StatementExprNode

fun String.parse() =
    AntlrASTBuilder().buildBaseAST(this, "<test>")

fun RootNode.closure() =
    (statements[0] as StatementExprNode).expression as BlockLiteralNode

/**
 * Asserts that a list of generated bytecodes matches an expected list.
 *
 * @param actual   The list of actual generated bytecodes
 * @param expected The list of expected bytecodes
 *                 Int, UInt and Bytecode values are accepted for convenience.
 *                 Bytecode and Int values will be converted to UInt ones.
 */
@OptIn(ExperimentalUnsignedTypes::class)
fun assertBytecodesEquals(actual: List<UInt>, vararg expected: Any) {
    assertEquals(expected.size, actual.size)

    val expectedValues = expected.map {
        when (it) {
            is UInt     -> it
            is Int      -> it.toUInt()
            is Bytecode -> it.ordinal.toUInt()
            else -> throw IllegalArgumentException()
        }
    }

    for (i in actual.indices) {
        val expectedValue = expectedValues[i]
        val actualValue = actual[i]
        assertEquals(expectedValue, actualValue,
            "Expected value $expectedValue but found $actualValue at index $i")
    }
}
